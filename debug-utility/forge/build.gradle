import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        mavenCentral()
    }
}
plugins {
    id("com.kotori316.du.common")
    id("com.kotori316.du.platforms")
    id("net.minecraftforge.gradle") version("[6.0,6.2)")
    id("org.parchmentmc.librarian.forgegradle") version("1.+")
    id("org.spongepowered.mixin") version("0.7.38")
}

String mod_id = "debug_utility"

println("Java: ${System.getProperty "java.version"}, JVM: ${System.getProperty "java.vm.version"} (${System.getProperty "java.vendor"}), Arch: ${System.getProperty "os.arch"}")
minecraft {
    mappings(channel: "official", version: project.property("minecraft").toString())
    runs {
        create("client") {
            workingDirectory(project.file("Minecraft"))
            property("forge.logging.markers", "REGISTRIES")
            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg")
            property("mixin.debug.export", "true")
            property("forge.logging.console.level", "debug")
            args '--username', "Kotori"

            mods {
                create(mod_id) {
                    source(sourceSets.main)
                }
            }
        }
    }
}

repositories {
    mavenCentral()
    maven {
        name = "Azure-SLP"
        url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
        content {
            includeModule("org.typelevel", "cats-core_3")
            includeModule("org.typelevel", "cats-kernel_3")
        }
    }
}

def commonProject = project.findProject(":debug-utility:common")
dependencies {
    minecraft("net.minecraftforge:forge:${project.property("forge_version")}")

    if (commonProject != null) {
        compileOnly(commonProject)
    }
}

processResources {
    from(commonProject.sourceSets.main.resources)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile).configureEach {
    source(project(":debug-utility:common").sourceSets.main.allSource)
}

tasks.named("compileJava", JavaCompile.class) {
    dependsOn("processResources")
}

test {
    // useJUnitPlatform()
}

def jarAttributeMap = [
        "Specification-Title"     : mod_id,
        "Specification-Vendor"    : "Kotori316",
        "Specification-Version"   : "1", // We are version 1 of ourselves
        "Implementation-Title"    : project.name,
        "Implementation-Version"  : project.jar.archiveVersion,
        "Implementation-Vendor"   : "Kotori316",
        "Implementation-Timestamp": ZonedDateTime.now().format(DateTimeFormatter.ISO_INSTANT),
        "MixinConfigs"            : "${mod_id}.mixins.json",
        "Automatic-Module-Name"   : mod_id,
]

jar {
    manifest {
        attributes(jarAttributeMap)
    }
}

jar.finalizedBy("reobfJar")

tasks.register('deobfJar', Jar) {
    from sourceSets.main.output
    archiveClassifier.set("deobf")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(jarAttributeMap)
    }
}

sourceSets.main {
    def dir = layout.buildDirectory.dir("sourcesSets/${it.name}")
    it.output.setResourcesDir(dir)
    it.java.destinationDirectory = dir
}
